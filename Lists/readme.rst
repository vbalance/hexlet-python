Python: Списки
=====================================

.. contents::

01 - Вес Хэмминга (hamming_weight.py)
-------------------------------------

Вес Хэмминга это количество единиц в двоичном представлении числа.
Реализуйте функцию hamming_weight, которая считает вес Хэмминга.

Примеры:

    >>> hamming_weight(0)
    0
    >>> hamming_weight(4)
    1
    >>> hamming_weight(101)
    4

02 - Треугольник Паскаля (triangle.py)
--------------------------------------

Треугольник Паскаля — бесконечная таблица биномиальных коэффициентов, имеющая треугольную форму. В этом треугольнике на вершине и по бокам стоят единицы. Каждое число равно сумме двух расположенных над ним чисел. Строки треугольника симметричны относительно вертикальной оси.:

    0:      1
    1:     1 1
    2:    1 2 1
    3:   1 3 3 1
    4:  1 4 6 4 1

Напишите функцию triangle(), которая возвращает указанную строку треугольника Паскаля в виде списка.

Пример::

    >>> triangle(0)
    [1]
    >>> triangle(4)
    [1, 4, 6, 4, 1]

03 - Увеличение двумерного списка (enlarge.py)
----------------------------------------------

Реализуйте функцию enlarge(), которая принимает изображение в виде двумерного списка строк и увеличивает его в два раза, то есть удваивает каждый символ по горизонтали и вертикали.

    >>> def show(image):
    ...     for line in image:
    ...         print(line)
    ...
    >>> dot = ['@']
    >>> show(enlarge(dot))
    @@
    @@
    >>> frame = [
    ...     '****',
    ...     '*  *',
    ...     '*  *',
    ...     '****'
    ... ]
    >>> show(frame)
    ****
    *  *
    *  *
    ****
    >>> show(enlarge(frame))
    ********
    ********
    **    **
    **    **
    **    **
    **    **
    ********
    ********

Подсказка.
Если вам потребуется склеить список строк в одну строку, воспользуйтесь таким методом:

    >>> chunks = ["Hello", " ", "World", "!"]
    >>> ''.join(chunks)
    'Hello World!'

04 - Длина последнего слова (length_of_last_word.py)
------------------------------

Реализуйте функцию length_of_last_word(), которая возвращает длину последнего слова переданной на вход строки. Словом считается любая последовательность не содержащая пробелы, символы перевода строки \n и табуляции \t.

    >>> length_of_last_word('')
    0
    >>> length_of_last_word('man in Black')
    5
    >>> length_of_last_word('hello, world!     ')
    6
    >>> length_of_last_word('hello\t\nworld')
    5

05 - Чанкование (chunked.py)
----------------------------

Реализуйте функцию chunked, которая принимает на вход число и последовательность. Число задает размер чанка (куска). Функция должна вернуть список, состоящий из чанков указанной размерности. При этом список должен делиться на куски-списки, строка — на строки, кортеж — на кортежи!

    >>> chunked(2, ['a', 'b', 'c', 'd'])
    [['a', 'b'], ['c', 'd']]
    >>> chunked(3, ['a', 'b', 'c', 'd'])
    [['a', 'b', 'c'], ['d']]
    >>> chunked(3, 'foobar')
    ['foo', 'bar']
    >>> chunked(10, (42,))
    [(42,)]

06 - Возрастающая последовательность
---------------------------------------

07 - Самая длинная подстрока
-------------------------------

08 - Сравнение версий
------------------------

09 - Список диапазонов
-------------------------

10 - Транспонирование матриц
-------------------------------

11 - Чанкование потока
-------------------------

12 - Зеркалирование матрицы
------------------------------

13 - Сумма интервалов
------------------------

14 - Обратная польская запись
--------------------------------

15 - Улитка
--------------

16 - Умножение матриц
------------------------

17 - Копилка
---------------
